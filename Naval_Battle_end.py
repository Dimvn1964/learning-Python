from random import randint                                                     #импорт функции randint из модуля random

class Dot:                                                                     #создание класса "Точка"
    def __init__(self, x, y):                                                  #создание объекта (точки) с обязательными полями "х" и "у" вызовом метода "__init__"
        self.x = x                                                             #присвоение координате "х" объекта (точки) значения "х"
        self.y = y                                                             #присвоение координате "у" объекта (точки) значения "у"

    def __eq__(self, other):                                                   #вызов метода eq - сравнение на равенство координат созданного объекта (точки) с координатами другого объекта (точки)
        return self.x == other.x and self.y == other.y

    def __repr__(self):                                                        #вызов метода repr - вывод координат точки в консоль
        return f"({self.x}, {self.y})"                                         #возврат координат в консоль


class BoardException(Exception):                                               #создание класса исключений
    pass

class BoardOutException(BoardException):                                       #создание класса исключения "выстрел за доску"
    def __str__(self):
        return "Вы пытаетесь выстрелить за пределы доски!"                     #вывод для пользователя

class BoardUsedException(BoardException):                                      #создание класса исключения "повторный выстрел"
    def __str__(self):
        return "Этот квадрат Вами уже обстрелян!"                              #вывод для пользователя

class BoardWrongShipException(BoardException):                                 #создание класса исключения "недопустимое размещение корабля"
    pass

class Ship:                                                                    #создание класса "корабль"
    def __init__(self, bow, l, o):                                             #создание объекта с аргументами "bow", "l" и "o" вызовом метода "__init__"
        self.bow = bow                                                         #присвоение полю "bow" (длина корабля) объекта значения "bow"
        self.l = l                                                             #присвоение полю "l" (точка размещения носа корабля) объекта значения "l"
        self.o = o                                                             #присвоение полю "o" (направление корабля вертикальное/горизонтальное) объекта значения "o"
        self.lives = l                                                         #присвоение полю "lives" (количество жизней корабля) объекта значения "l"

    @property                                                                  #установка декоратора
    def dots(self):                                                            #объявление метода dots (все точки корабля)
        ship_dots = []                                                         #создание списка ship_dots, содержащего все точки корабля
        for i in range(self.l):                                                #цикл обхода точек от 0 до "длина корабля минус 1"
            cur_x = self.bow.x                                                 #обход по х
            cur_y = self.bow.y                                                 #обход по у

            if self.o == 0:                                                    #если о равно 0, то
                cur_x += i                                                     #вертикальная ориентация корабля

            elif self.o == 1:                                                  #если о равно 1, то
                cur_y += i                                                     #горизонтальная ориентация корабля


            ship_dots.append(Dot(cur_x, cur_y))                                #список точек корабля

        return ship_dots                                                       #возврат списка точек корабля

    def shooten(self, shot):                                                   #объявление метода shooten (поражение корабля)
        return shot in self.dots                                               #проверка на попадание - соответствие координат точек корабля координатам выстрела


class Board:                                                                   #создание класса "Доска"
    def __init__(self, hid = False, size = 6):                                 #создание объекта с аргументами необходимость скрытия и размер вызовом метода "__init__"#
        self.size = size                                                       #введение размера
        self.hid = hid                                                         #введение необходимости скрытия

        self.count = 0                                                         #введение переменной count - количество пораженных кораблей

        self.field = [["O"] * size for _ in range(size)]                       #введение атрибута field содержащего игровую сетку с начальным состоянием О

        self.busy = []                                                         #введение атрибута (списка) busy для хранения занятых точек (кораблем или обстрелом)
        self.ships = []                                                        #введение списка кораблей на доске

    def add_ship(self, ship):                                                  #объявление метода add_ship (размещение корабля на доску)

        for d in ship.dots:                                                    #цикл обхода точек корабля
            if self.out(d) or d in self.busy:                                  #проверка нахождения точек корабля в пределах доски и свободности точек
                raise BoardWrongShipException()                                #вызов исключения если проверка не пройдена
        for d in ship.dots:                                                    #цикл обхода точек корабля
            self.field[d.x][d.y] = "█"                                         #простановка символа █ в точки, занятые кораблем
            self.busy.append(d)                                                #добавление точек в список занятых

        self.ships.append(ship)                                                #добавление корабля в список
        self.contour(ship)                                                     #обвод корабля по контуру

    def contour(self, ship, verb = False):                                     #объявление метода contour (обвод корабля по контуру) с параметрами ship и verb (необходимость простановки символов Т вокруг корабля)
        near = [                                                               #объявление списка всех точек вокруг точки нахождения
          (-1, -1), (-1, 0), (-1, 1),
           (0, -1), (0, 0), (0, 1),
         (1, -1), (1, 0), (1, 1)
        ]

        for d in ship.dots:                                                    #цикл проверки точек корабля
            for dx, dy in near:                                                #цикл проверки точек вокруг корабля
                cur = Dot(d.x + dx, d.y + dy)                                  #сдвиг исходной точки на dx и dy
                if not(self.out(cur)) and cur not in self.busy:                #проверка точки на нахождение в пределах доски и отсутствие в списке занятых
                    if verb:                                                   #проверка необходимости скрытия корабля
                        self.field[cur.x][cur.y] = "T"                         #простановка символа Т в занятые точки
                    self.busy.append(cur)                                      #добавление точек в список занятых

    def __str__(self):                                                         #метод вывода корабля на доску
        res = ""                                                               #создание переменной res для записи доски
        res += "  | 1 | 2 | 3 | 4 | 5 | 6 |"
        for i, row in enumerate(self.field):                                   #цикл обхода по строкам доски
            res +=f"\n{i+1} | " + " | ".join(row) + " | "                      #вывод номера строки и клетки в строке

        if self.hid:                                                           #объявление параметра hid типа bool (скрывать корабль или нет)
            res = res.replace("█", "O")                                        #если hid True то все символы корабля заменяются на О
        return res

    def out(self, d):                                                          #объявление метода out (нахождение точки в пределах доски)
        return not((0<= d.x < self.size) and (0<= d.y < self.size))            #возврат True если точка за пределами доски, False если в пределах доски

    def shot(self, d):                                                         #объявление метода shot (выстрел по доске)
        if self.out(d):                                                        #если точка выстрела за пределами доски то вызов исключения
            raise BoardOutException()                                          #вызов исключения

        if d in self.busy:                                                     #если точка занята или уже обстреляна то вызов исключения
            raise BoardUsedException()                                         #вызов исключения

        self.busy.append(d)                                                    #внесение точки в список занятых

        for ship in self.ships:                                                #цикл проверки кораблей
            if d in ship.dots:                                                 #если обстрелянная точка естсь в списке точек кораблей
                ship.lives -= 1                                                #уменьшение на 1 количества жизней корабля
                self.field[d.x][d.y] = "X"                                     #простановка в точку символа Х
                if ship.lives == 0:                                            #если количество оставшихся жизней корабля равно 0
                    self.count += 1                                            #увеличение на 1 списка уничтоженных кораблей
                    self.contour(ship, verb=True)                              #обвод уничтоженного корабля по контуру
                    print("Корабль уничтожен!")                                #вывод для пользователя
                    return False                                               #возврат False для исключения повторного хода
                else:                                                          #если количество оставшихся жизней корабля не равно 0
                    print("Корабль повреждён!")                                #вывод для пользователя
                    return True                                                #возврат True для повторного хода

        self.field[d.x][d.y] = "T"                                             #простановка символа Т в занятую (обстрелянную) точку
        print("Промах!")                                                       #вывод для пользователя
        return False                                                           #возврат False для исключения повторного хода

    def begin(self):                                                           #объявление метода begin
        self.busy = []                                                         #обнуление списка busy

class Player:                                                                  #создание класса "Игрок"
    def __init__(self, board, enemy):                                          #создание объекта с аргументами "доска игрока" и "доска копьютера"
        self.board = board                                                     #доска пользователя
        self.enemy = enemy                                                     #доска компьютера

    def ask(self):                                                             #создание метода опроса игрока
        raise NotImplementedError()                                            #вызов ошибки и необходимости наличия этого метода у потомков этого класса

    def move(self):                                                            #создание метода, производящего ход в игре
        while True:                                                            #цикл
            try:
                target = self.ask()                                            #вызов метода ask получение координат выстрела
                repeat = self.enemy.shot(target)                               #повтор выстрела если выстрел удачный
                return repeat                                                  #возврат необходимости повтора
            except BoardException as e:                                        #вызов исключения
                print(e)                                                       #печать исключения


class AI(Player):                                                              #создание класса "Игрок-компьютер" наследованием класса "Игрок"
    def ask(self):                                                             #переопределение метода ask для Игрока-компьютера
        d = Dot(randint(0,5), randint(0,5))                                    #генератор случайной точки
        print(f"Ход компьютера: {d.x+1} {d.y+1}")                              #вывод для пользователя координат выстрела компьютера
        return d                                                               #возврат координат выстрела

class User(Player):                                                            #создание класса "Игрок пользователь" наследованием класса "Игрок"
    def ask(self):                                                             #переопределение метода ask для Игрока-пользователя
        while True:                                                            #цикл
            cords = input("Ходит пользователь:  ").split()                     #приглашение и ввод координат выстрела

            if len(cords) != 2:                                                #определение соответствия требованиям (=2) количества введенных координат
                print("Введите обе координаты!  ")                             #вывод для пользователя
                continue

            x, y = cords

            if not(x.isdigit()) or not(y.isdigit()):                           #определение, являются ли введенные символы числами
                print("Введите два числа в диапазоне от 1 до 6")               #вывод для пользователя
                continue

            x, y = int(x), int(y)

            return Dot(x-1, y-1)                                               #возврат координат выстрела


class Game:                                                                    #создание класса "Игра"
    def __init__(self, size=6):
        self.size = size
        pl = self.random_board()
        co = self.random_board()
        co.hid = True

        self.ai = AI(co, pl)
        self.us = User(pl, co)

    def random_board(self):                                                    #объявление метода, генерирующего случайную доску
        board = None
        while board is None:
            board = self.random_place()
        return board

    def random_place(self):                                                    #объявление метода random_place (случайное размещение кораблей)
        lens = [3, 2, 2, 1, 1, 1, 1]                                           #задание типов и количества кораблей
        board = Board(size=self.size)                                          #создание доски
        attempts = 0                                                           #обнуление счётчика попыток расстановки кораблей
        for l in lens:                                                         #цикл размещения кораблей
            while True:
                attempts += 1                                                  #увеличение на 1 счётчика попыток расстановки кораблей
                if attempts > 2000:                                            #ограничение числа попыток расстановки кораблей
                    return None
                ship = Ship(Dot(randint(0, self.size), randint(0, self.size)), l, randint(0, 1))                #создание корабля с аргументами
                try:
                    board.add_ship(ship)                                       #добавление корабля на доску
                    break                                                      #прерывание программы
                except BoardWrongShipException:                                #вызов исключения
                    pass
        board.begin()
        return board                                                           #возврат доски

    def greet(self):                                                           #объявление функции greet (приветствия)
        print("-------------------")                                           #вывод черты
        print(" Рады приветствовать Вас  ")                                    #вывод для пользователя
        print("       в игре       ")                                          #вывод для пользователя
        print('    "Морской бой"    ')                                         #вывод для пользователя
        print("-------------------")                                           #вывод черты
        print(" формат ввода: x y ")                                           #вывод для пользователя
        print(" x - номер строки  ")                                           #вывод для пользователя
        print(" y - номер столбца ")                                           #вывод для пользователя
        print("Диапазон каждой координаты от 1 до 6.")                         #вывод для пользователя
        print('Окончание ввода - клавиша "Enter".')                            #вывод для пользователя

    def loop(self):                                                            #объявление функции loop (цикла)
        num = 0                                                                #обнуление счетчика ходов
        while True:
            print("-" * 20)                                                    #вывод черты
            print("Доска пользователя:")                                       #вывод для пользователя
            print(self.us.board)                                               #вывод доски пользователя
            print("-" * 20)                                                    #вывод черты
            print("Доска компьютера:")                                         #вывод для пользователя
            print(self.ai.board)                                               #вывод доски компьютера
            if num % 2 == 0:                                                   #определение чётности номера хода
                print("-" * 20)                                                #вывод черты
                print("Ваш ход!")                                              #вывод для пользователя
                repeat = self.us.move()
            else:
                print("-" * 20)                                                #вывод черты
                print("Ходит компьютер!")                                      #вывод для пользователя
                repeat = self.ai.move()
            if repeat:
                num -= 1

            if self.ai.board.count == 7:                                       #сравнение количества подбитых кораблей с количеством кораблей игрока "Компьютер"
                print("-" * 20)                                                #вывод черты
                print("Поздравляем, Вы выиграли!")                             #вывод для пользователя
                break                                                          #прерывание программы

            if self.us.board.count == 7:                                       #сравнение количества подбитых кораблей с количеством кораблей игрока "Пользователь"
                print("-" * 20)                                                #вывод черты
                print("К сожалению, компьютер выиграл!")                       #вывод для пользователя
                break                                                          #прерывание программы
            num += 1                                                           #увеличение счётчика ходов

    def start(self):                                                           #объявление метода start
        self.greet()                                                           #запуск приветствия
        self.loop()                                                            #запуск цикла

g = Game()                                                                     #создание экземпляра класса Game
g.start()                                                                      #вызов метода start
